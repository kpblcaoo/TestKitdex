"""
Tests for TestKit factories.
"""
import pytest
from tests.factories import (
    CSharpMethodFactory,
    CSharpCodeFactory,
    create_user_factory,
    create_message_factory,
    create_generic_factory,
    create_user_factory_code,
    create_message_factory_code,
    create_generic_factory_code,
    create_testkit_class_code
)


class TestCSharpMethodFactory:
    """Test C# method factory."""
    
    def test_create_user_factory_method(self):
        """Test creating user factory method."""
        # When
        method = create_user_factory()
        
        # Then
        assert method.name == "CreateUser"
        assert method.return_type == "User"
        assert method.tags == ["user", "factory", "test-data"]
        assert method.is_static is True
        assert method.parameters == ["string name = \"TestUser\""]
    
    def test_create_message_factory_method(self):
        """Test creating message factory method."""
        # When
        method = create_message_factory()
        
        # Then
        assert method.name == "CreateMessage"
        assert method.return_type == "Message"
        assert method.tags == ["message", "factory", "telegram"]
        assert method.is_static is True
        assert method.parameters == ["string text = \"Test message\""]
    
    def test_create_generic_factory_method(self):
        """Test creating generic factory method."""
        # When
        method = create_generic_factory()
        
        # Then
        assert method.name == "CreateFactory"
        assert method.return_type == "T"
        assert method.tags == ["factory", "generic"]
        assert method.is_generic is True
        assert method.is_static is True
    
    def test_create_custom_method(self):
        """Test creating custom method with factory."""
        # When
        method = CSharpMethodFactory.create_method(
            name="CustomMethod",
            return_type="string",
            parameters=["int id", "string name"],
            tags=["custom", "test"],
            summary="Custom test method",
            is_static=False
        )
        
        # Then
        assert method.name == "CustomMethod"
        assert method.return_type == "string"
        assert method.tags == ["custom", "test"]
        assert method.is_static is False
        assert method.parameters == ["int id", "string name"]


class TestCSharpCodeFactory:
    """Test C# code factory."""
    
    def test_create_user_factory_code(self):
        """Test creating user factory code."""
        # When
        code = create_user_factory_code()
        
        # Then
        assert "CreateUser" in code
        assert "User" in code
        assert "user, factory, test-data" in code
        assert "public static" in code
    
    def test_create_message_factory_code(self):
        """Test creating message factory code."""
        # When
        code = create_message_factory_code()
        
        # Then
        assert "CreateMessage" in code
        assert "Message" in code
        assert "message, factory, telegram" in code
        assert "public static" in code
    
    def test_create_generic_factory_code(self):
        """Test creating generic factory code."""
        # When
        code = create_generic_factory_code()
        
        # Then
        assert "CreateFactory" in code
        assert "T" in code
        assert "factory, generic" in code
        assert "where T : class" in code
    
    def test_create_testkit_class_code(self):
        """Test creating TestKit class code."""
        # When
        code = create_testkit_class_code()
        
        # Then
        assert "TestDataFactory" in code
        assert "CreateUser" in code
        assert "CreateMessage" in code
        assert "CreateFactory" in code
        assert "namespace TestKit.Sample" in code
        assert "public static class" in code
    
    def test_create_custom_method_code(self):
        """Test creating custom method code."""
        # When
        code = CSharpCodeFactory.create_method_with_tags(
            method_name="CustomMethod",
            return_type="string",
            parameters=["int id"],
            tags=["custom", "test"],
            summary="Custom test method",
            is_static=False
        )
        
        # Then
        assert "CustomMethod" in code
        assert "string" in code
        assert "custom, test" in code
        assert "public " in code
        assert "static " not in code


class TestFactoryIntegration:
    """Test integration between factories and parser."""
    
    def test_parse_factory_generated_code(self, csharp_parser):
        """Test parsing code generated by factories."""
        # Given
        code = create_testkit_class_code()
        
        # When
        methods = csharp_parser.extract_methods(code)
        
        # Then
        assert len(methods) == 3
        
        # Check all methods are found
        method_names = [m.name for m in methods]
        assert "CreateUser" in method_names
        assert "CreateMessage" in method_names
        assert "CreateFactory" in method_names
        
        # Check tags are extracted correctly
        user_method = next(m for m in methods if m.name == "CreateUser")
        assert user_method.tags == ["user", "factory", "test-data"]
        
        message_method = next(m for m in methods if m.name == "CreateMessage")
        assert message_method.tags == ["message", "factory", "telegram"]
        
        factory_method = next(m for m in methods if m.name == "CreateFactory")
        assert factory_method.tags == ["factory", "generic"]
        assert factory_method.is_generic is True 