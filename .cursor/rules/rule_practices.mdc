# BDD-TDD Testing Rules

## Unit Tests
- Начинай с Gherkin сценария в features/
- Пиши unit тесты в tests/unit/ с именем test_[module_name].py
- Используй Given-When-Then структуру в каждом тесте
- Создавай test data через factories в tests/factories/
- Покрытие unit тестов > 95%
- Один тест = одна функциональность
- Не делай тесты зависимыми друг от друга

## BDD Tests
- Создавай step definitions в features/steps/ как тонкий слой
- Передавай данные между шагами через context
- Используй существующие unit тесты для проверок
- Создавай test data в Given шагах
- Не дублируй бизнес-логику в step definitions
- Покрытие BDD сценариев > 80%

## Test Structure
- Группируй связанные тесты в классы
- Используй setup_method() для фикстур
- Разделяй unit/integration/BDD тесты
- Документируй сложные тесты
- Именуй тесты как test_what_it_tests
- Именуй factories как create_what_it_creates

## Test Data
- Используй разумные defaults в factories
- Поддерживай override через kwargs
- Создавай разные factories для разных сценариев
- Не создавай слишком сложные объекты
- Не делай factories зависимыми друг от друга

## Performance
- Unit тесты < 1 сек на тест
- Integration тесты < 5 сек на тест
- BDD тесты < 10 сек на сценарий
- Полный test suite < 2 минуты
- Используй assert messages для понятных ошибок

## Anti-patterns
- Не делай тесты зависимыми друг от друга
- Не создавай сложную логику в step definitions
- Не тестируй private методы
- Не делай медленные тесты без необходимости
- Не дублируй test data
- Не игнорируй падающие тесты
- Формулируй как чеклист или ограничение.
- Избегай абстракций. Пиши в терминах кода, файлов, шагов.
- Не используй "если", "можно", "нужно бы" — только "делай" или "не делай".
- Мягкий ориентир 7-10 строк на правило(один тематический файл).